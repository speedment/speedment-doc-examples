package com.speedment.datamodel.db0.hares.hare.generated;

import com.speedment.datamodel.db0.hares.hare.Hare;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.annotation.GeneratedCode;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;

/**
 * The generated base for the {@link
 * com.speedment.datamodel.db0.hares.hare.Hare}-interface representing entities
 * of the {@code hare}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedHare {
    
    /**
     * This Field corresponds to the {@link Hare} field that can be obtained
     * using the {@link Hare#getId()} method.
     */
    final IntField<Hare, Integer> ID = IntField.create(
        Identifier.ID,
        Hare::getId,
        Hare::setId,
        TypeMapper.primitive(), 
        true
    );
    /**
     * This Field corresponds to the {@link Hare} field that can be obtained
     * using the {@link Hare#getName()} method.
     */
    final StringField<Hare, String> NAME = StringField.create(
        Identifier.NAME,
        Hare::getName,
        Hare::setName,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Hare} field that can be obtained
     * using the {@link Hare#getColor()} method.
     */
    final StringField<Hare, String> COLOR = StringField.create(
        Identifier.COLOR,
        Hare::getColor,
        Hare::setColor,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Hare} field that can be obtained
     * using the {@link Hare#getAge()} method.
     */
    final IntField<Hare, Integer> AGE = IntField.create(
        Identifier.AGE,
        Hare::getAge,
        Hare::setAge,
        TypeMapper.primitive(), 
        false
    );
    
    /**
     * Returns the id of this Hare. The id field corresponds to the database
     * column db0.hares.hare.id.
     * 
     * @return the id of this Hare
     */
    int getId();
    
    /**
     * Returns the name of this Hare. The name field corresponds to the database
     * column db0.hares.hare.name.
     * 
     * @return the name of this Hare
     */
    String getName();
    
    /**
     * Returns the color of this Hare. The color field corresponds to the
     * database column db0.hares.hare.color.
     * 
     * @return the color of this Hare
     */
    String getColor();
    
    /**
     * Returns the age of this Hare. The age field corresponds to the database
     * column db0.hares.hare.age.
     * 
     * @return the age of this Hare
     */
    int getAge();
    
    /**
     * Sets the id of this Hare. The id field corresponds to the database column
     * db0.hares.hare.id.
     * 
     * @param id to set of this Hare
     * @return   this Hare instance
     */
    Hare setId(int id);
    
    /**
     * Sets the name of this Hare. The name field corresponds to the database
     * column db0.hares.hare.name.
     * 
     * @param name to set of this Hare
     * @return     this Hare instance
     */
    Hare setName(String name);
    
    /**
     * Sets the color of this Hare. The color field corresponds to the database
     * column db0.hares.hare.color.
     * 
     * @param color to set of this Hare
     * @return      this Hare instance
     */
    Hare setColor(String color);
    
    /**
     * Sets the age of this Hare. The age field corresponds to the database
     * column db0.hares.hare.age.
     * 
     * @param age to set of this Hare
     * @return    this Hare instance
     */
    Hare setAge(int age);
    
    enum Identifier implements ColumnIdentifier<Hare> {
        
        ID    ("id"),
        NAME  ("name"),
        COLOR ("color"),
        AGE   ("age");
        
        private final String columnName;
        private final TableIdentifier<Hare> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName      = columnName;
            this.tableIdentifier = TableIdentifier.of(    getDbmsName(), 
                getSchemaName(), 
                getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "db0";
        }
        
        @Override
        public String getSchemaName() {
            return "hares";
        }
        
        @Override
        public String getTableName() {
            return "hare";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<Hare> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}