package com.speedment.datamodel.db0.hares.carrot.generated;

import com.speedment.datamodel.db0.hares.carrot.Carrot;
import com.speedment.datamodel.db0.hares.hare.Hare;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ComparableForeignKeyField;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.IntForeignKeyField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import java.util.Optional;
import java.util.OptionalInt;

/**
 * The generated base for the {@link
 * com.speedment.datamodel.db0.hares.carrot.Carrot}-interface representing
 * entities of the {@code carrot}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedCarrot {
    
    /**
     * This Field corresponds to the {@link Carrot} field that can be obtained
     * using the {@link Carrot#getId()} method.
     */
    final IntField<Carrot, Integer> ID = IntField.create(
        Identifier.ID,
        Carrot::getId,
        Carrot::setId,
        TypeMapper.primitive(), 
        true
    );
    /**
     * This Field corresponds to the {@link Carrot} field that can be obtained
     * using the {@link Carrot#getName()} method.
     */
    final StringField<Carrot, String> NAME = StringField.create(
        Identifier.NAME,
        Carrot::getName,
        Carrot::setName,
        TypeMapper.identity(), 
        false
    );
    /**
     * This Field corresponds to the {@link Carrot} field that can be obtained
     * using the {@link Carrot#getOwner()} method.
     */
    final IntForeignKeyField<Carrot, Integer, Hare> OWNER = IntForeignKeyField.create(
        Identifier.OWNER,
        Carrot::getOwner,
        Carrot::setOwner,
        Hare.ID,
        TypeMapper.primitive(), 
        false
    );
    /**
     * This Field corresponds to the {@link Carrot} field that can be obtained
     * using the {@link Carrot#getRival()} method.
     */
    final ComparableForeignKeyField<Carrot, Integer, Integer, Hare> RIVAL = ComparableForeignKeyField.create(
        Identifier.RIVAL,
        o -> OptionalUtil.unwrap(o.getRival()),
        Carrot::setRival,
        Hare.ID,
        TypeMapper.identity(), 
        false
    );
    
    /**
     * Returns the id of this Carrot. The id field corresponds to the database
     * column db0.hares.carrot.id.
     * 
     * @return the id of this Carrot
     */
    int getId();
    
    /**
     * Returns the name of this Carrot. The name field corresponds to the
     * database column db0.hares.carrot.name.
     * 
     * @return the name of this Carrot
     */
    String getName();
    
    /**
     * Returns the owner of this Carrot. The owner field corresponds to the
     * database column db0.hares.carrot.owner.
     * 
     * @return the owner of this Carrot
     */
    int getOwner();
    
    /**
     * Returns the rival of this Carrot. The rival field corresponds to the
     * database column db0.hares.carrot.rival.
     * 
     * @return the rival of this Carrot
     */
    OptionalInt getRival();
    
    /**
     * Sets the id of this Carrot. The id field corresponds to the database
     * column db0.hares.carrot.id.
     * 
     * @param id to set of this Carrot
     * @return   this Carrot instance
     */
    Carrot setId(int id);
    
    /**
     * Sets the name of this Carrot. The name field corresponds to the database
     * column db0.hares.carrot.name.
     * 
     * @param name to set of this Carrot
     * @return     this Carrot instance
     */
    Carrot setName(String name);
    
    /**
     * Sets the owner of this Carrot. The owner field corresponds to the
     * database column db0.hares.carrot.owner.
     * 
     * @param owner to set of this Carrot
     * @return      this Carrot instance
     */
    Carrot setOwner(int owner);
    
    /**
     * Sets the rival of this Carrot. The rival field corresponds to the
     * database column db0.hares.carrot.rival.
     * 
     * @param rival to set of this Carrot
     * @return      this Carrot instance
     */
    Carrot setRival(Integer rival);
    
    /**
     * Queries the specified manager for the referenced Hare. If no such Hare
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Hare findOwner(Manager<Hare> foreignManager);
    
    /**
     * Queries the specified manager for the referenced Hare. If no such Hare
     * exists, an {@code NullPointerException} will be thrown.
     * 
     * @param foreignManager the manager to query for the entity
     * @return               the foreign entity referenced
     */
    Optional<Hare> findRival(Manager<Hare> foreignManager);
    
    enum Identifier implements ColumnIdentifier<Carrot> {
        
        ID    ("id"),
        NAME  ("name"),
        OWNER ("owner"),
        RIVAL ("rival");
        
        private final String columnName;
        private final TableIdentifier<Carrot> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName      = columnName;
            this.tableIdentifier = TableIdentifier.of(    getDbmsName(), 
                getSchemaName(), 
                getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "db0";
        }
        
        @Override
        public String getSchemaName() {
            return "hares";
        }
        
        @Override
        public String getTableName() {
            return "carrot";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<Carrot> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}