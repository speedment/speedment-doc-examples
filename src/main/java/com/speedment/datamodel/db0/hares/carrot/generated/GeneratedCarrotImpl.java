package com.speedment.datamodel.db0.hares.carrot.generated;

import com.speedment.datamodel.db0.hares.carrot.Carrot;
import com.speedment.datamodel.db0.hares.hare.Hare;
import com.speedment.runtime.core.annotation.GeneratedCode;
import com.speedment.runtime.core.manager.Manager;
import com.speedment.runtime.core.util.OptionalUtil;
import java.util.Objects;
import java.util.Optional;
import java.util.OptionalInt;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * com.speedment.datamodel.db0.hares.carrot.Carrot}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedCarrotImpl implements Carrot {
    
    private int id;
    private String name;
    private int owner;
    private Integer rival;
    
    protected GeneratedCarrotImpl() {
        
    }
    
    @Override
    public int getId() {
        return id;
    }
    
    @Override
    public String getName() {
        return name;
    }
    
    @Override
    public int getOwner() {
        return owner;
    }
    
    @Override
    public OptionalInt getRival() {
        return OptionalUtil.ofNullable(rival);
    }
    
    @Override
    public Carrot setId(int id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Carrot setName(String name) {
        this.name = name;
        return this;
    }
    
    @Override
    public Carrot setOwner(int owner) {
        this.owner = owner;
        return this;
    }
    
    @Override
    public Carrot setRival(Integer rival) {
        this.rival = rival;
        return this;
    }
    
    @Override
    public Hare findOwner(Manager<Hare> foreignManager) {
        return foreignManager.stream().filter(Hare.ID.equal(getOwner())).findAny().orElse(null);
    }
    
    @Override
    public Optional<Hare> findRival(Manager<Hare> foreignManager) {
        if (getRival().isPresent()) {
            return foreignManager.stream().filter(Hare.ID.equal(getRival().getAsInt())).findAny();
        } else {
            return Optional.empty();
        }
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "    + Objects.toString(getId()));
        sj.add("name = "  + Objects.toString(getName()));
        sj.add("owner = " + Objects.toString(getOwner()));
        sj.add("rival = " + Objects.toString(OptionalUtil.unwrap(getRival())));
        return "CarrotImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Carrot)) { return false; }
        final Carrot thatCarrot = (Carrot)that;
        if (this.getId() != thatCarrot.getId()) {return false; }
        if (!Objects.equals(this.getName(), thatCarrot.getName())) {return false; }
        if (this.getOwner() != thatCarrot.getOwner()) {return false; }
        if (!Objects.equals(this.getRival(), thatCarrot.getRival())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Integer.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(getName());
        hash = 31 * hash + Integer.hashCode(getOwner());
        hash = 31 * hash + Objects.hashCode(getRival());
        return hash;
    }
}